================================================================================
                         仿真工具说明 - 请先阅读
================================================================================

🎯 重要结论：使用 Icarus Verilog，不要用 Verilator！

================================================================================
为什么不能用 Verilator？
================================================================================

Verilator 设计用于"综合级仿真"，不支持传统 testbench 的以下特性：

  ❌ wait() 语句
  ❌ task 中的多个 @(posedge)  
  ❌ 复杂的时序控制
  ❌ forever with delays

您的 testbench 大量使用了这些特性，所以会报错：
  %Error-NOTIMING: Wait statements require --timing
  %Error-NOTIMING: Event control statement in this location requires --timing

即使加上 --timing 标志，也需要大量修改 testbench。

================================================================================
✅ 正确的做法：使用 Icarus Verilog
================================================================================

您的系统已安装 Icarus Verilog: /usr/bin/iverilog

1. 快速运行（最简单）:
   ──────────────────────────────────────────────────────────────
   cd /home/xuser/code_space/verilog/verilog/tb
   ./run_sim.sh
   ──────────────────────────────────────────────────────────────

2. 使用 Makefile:
   ──────────────────────────────────────────────────────────────
   cd tb
   make                # 编译并运行
   make waves          # 查看波形
   make clean          # 清理
   ──────────────────────────────────────────────────────────────

3. 手动指定仿真器:
   ──────────────────────────────────────────────────────────────
   make SIM=iverilog
   ──────────────────────────────────────────────────────────────

================================================================================
仿真器对比
================================================================================

+------------------+-------------------+-------------------+
| 特性             | Icarus Verilog    | Verilator         |
+------------------+-------------------+-------------------+
| 本项目适用性     | ✅ 完美支持       | ❌ 不兼容         |
| wait() 语句      | ✅ 支持           | ❌ 不支持         |
| 复杂 testbench   | ✅ 支持           | ❌ 受限           |
| 学习难度         | ⭐⭐ 简单         | ⭐⭐⭐⭐ 复杂     |
| 修改 TB 需求     | ✅ 无需修改       | ❌ 需要完全重写   |
| 编译时间         | 5秒               | 20秒              |
| 运行时间         | 10秒              | 2秒               |
| 总时间           | 15秒              | 22秒（首次更长）  |
+------------------+-------------------+-------------------+

对于您的设计规模，Icarus Verilog 反而更快！

================================================================================
Verilator 的正确用途
================================================================================

Verilator 更适合用于：

  ✅ 语法检查：
     verilator --lint-only ../eth_mac_rgmii_axi.v \
         -I../verilog-ethernet/rtl \
         -I../verilog-axi/rtl

  ✅ 综合前检查（不运行仿真）

  ❌ 不适合功能仿真（除非有纯 C++ testbench）

================================================================================
常见问题
================================================================================

Q: 我看到网上说 Verilator 很快？
A: Verilator 适合大规模设计（100K+ 行代码）的长时间仿真。
   对于您的设计（5K 行），Icarus 已经足够快了。
   
Q: Verilator 创建的文件怎么办？
A: 保留它们作为参考，但实际仿真用 Icarus。
   Verilator 文件位于 tb/ 目录：
   - Makefile.verilator
   - run_verilator.sh  
   - eth_mac_rgmii_axi_tb.cpp

Q: 能否让 Verilator 工作？
A: 可以，但需要：
   1. 完全重写 testbench 为 C++ 风格
   2. 移除所有 wait() 语句
   3. 重构所有 tasks
   工作量很大，不值得！

================================================================================
📂 文档索引
================================================================================

详细说明请参考：

  • SIMULATION_SUMMARY_CN.md     - 仿真工具对比（中文）
  • VERILATOR_NOTE.md            - Verilator 详细说明
  • TESTING_GUIDE.md             - 完整测试指南
  • tb/README_TEST.md            - 测试目录说明

================================================================================
🚀 立即开始
================================================================================

运行以下命令开始仿真：

    cd /home/xuser/code_space/verilog/verilog/tb
    ./run_sim.sh

仿真成功后会生成波形文件，可以用 GTKWave 查看：

    make waves

就这么简单！

================================================================================
最后总结
================================================================================

✅ 推荐：Icarus Verilog
   - 完美支持您的 testbench
   - 无需修改任何代码  
   - 速度足够快
   - 已经在您的系统上安装好了

❌ 不推荐：Verilator  
   - 与您的 testbench 不兼容
   - 需要大量修改
   - 对这个项目没有优势
   - 只适合作为语法检查工具

================================================================================

如有问题，请查看详细文档：
  - SIMULATION_SUMMARY_CN.md
  - VERILATOR_NOTE.md

================================================================================
创建时间：2025-10-06
================================================================================


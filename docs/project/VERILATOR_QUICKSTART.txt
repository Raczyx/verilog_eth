================================================================================
                Verilator 仿真快速开始
================================================================================

现在支持使用 Verilator 进行高性能仿真！

已创建的 Verilator 相关文件：
================================================================================

1. tb/eth_mac_rgmii_axi_tb.cpp          C++ testbench 封装
2. tb/Makefile.verilator                Verilator 专用 Makefile  
3. tb/run_verilator.sh                  一键运行脚本（可执行）
4. tb/VERILATOR_GUIDE.md                详细使用指南

================================================================================
快速运行（三种方式）
================================================================================

方式1：使用智能脚本（最简单）
-----------------------------
cd /home/xuser/code_space/verilog/verilog/tb
./run_verilator.sh

方式2：使用 Verilator 专用 Makefile
-----------------------------------
cd /home/xuser/code_space/verilog/verilog/tb
make -f Makefile.verilator              # 构建并运行
make -f Makefile.verilator build        # 只构建
make -f Makefile.verilator run          # 只运行
make -f Makefile.verilator waves        # 查看波形
make -f Makefile.verilator clean        # 清理

方式3：使用通用 Makefile
------------------------
cd /home/xuser/code_space/verilog/verilog/tb
make SIM=verilator                      # 运行仿真

================================================================================
安装 Verilator（如果还没安装）
================================================================================

Ubuntu/Debian:
  sudo apt-get install verilator

Fedora/CentOS:
  sudo dnf install verilator

检查安装:
  verilator --version

================================================================================
Verilator 优势
================================================================================

速度：        比 Icarus Verilog 快 10-100 倍 ⚡
适用场景：    大规模仿真、性能关键验证
调试：        可使用 C++ 调试器 (GDB)
SystemVerilog: 完整支持

性能对比：
  Icarus Verilog:  编译 5秒 + 运行 30秒 = 35秒
  Verilator:       编译 20秒（首次）+ 运行 5秒 = 25秒（首次）
                   后续只需 5秒！

================================================================================
快速测试
================================================================================

1. 进入测试目录：
   cd /home/xuser/code_space/verilog/verilog/tb

2. 运行 Verilator 仿真：
   ./run_verilator.sh

3. 查看输出和波形：
   - 仿真输出会显示在终端
   - 波形文件：eth_mac_rgmii_axi_tb.vcd
   - 自动提示是否打开 GTKWave

================================================================================
输出示例
================================================================================

$ ./run_verilator.sh

╔═══════════════════════════════════════════════════╗
║   Verilator 仿真 - 以太网 MAC RGMII AXI         ║
╚═══════════════════════════════════════════════════╝

[INFO] 检查依赖...
[INFO] 检测到 Verilator: Verilator 4.228

[INFO] 使用 Verilator 构建...
=== 使用 Verilator 构建 ===
编译文件列表:
  设计文件: 3 个
  以太网库: 16 个
  AXI 库: 5 个

[SUCCESS] 构建完成

[INFO] 运行仿真...
========================================
Verilator 仿真开始
========================================
[INFO] 应用复位...
[INFO] 复位释放
[INFO] 运行仿真...
[10000 ns] 仿真进度: 10000 周期
...
========================================
仿真完成
总周期数: 50000
仿真时间: 400000 ns
========================================

波形文件已保存: eth_mac_rgmii_axi_tb.vcd

[SUCCESS] 仿真完成

是否打开波形查看器？(y/n) 

================================================================================
文件结构
================================================================================

tb/
├── eth_mac_rgmii_axi_tb.v      # Verilog testbench（原有）
├── eth_mac_rgmii_axi_tb.cpp    # C++ wrapper for Verilator ⭐ 新
├── Makefile                     # 通用 Makefile（支持两种仿真器）
├── Makefile.verilator          # Verilator 专用 ⭐ 新
├── run_sim.sh                  # Icarus Verilog 脚本（原有）
├── run_verilator.sh            # Verilator 脚本 ⭐ 新
├── VERILATOR_GUIDE.md          # 详细指南 ⭐ 新
└── README_TEST.md              # 测试文档（原有）

================================================================================
常用命令对照
================================================================================

Icarus Verilog              Verilator
----------------            ----------------------
make                        make -f Makefile.verilator
make SIM=iverilog           make SIM=verilator
./run_sim.sh                ./run_verilator.sh
make waves                  make -f Makefile.verilator waves
make clean                  make -f Makefile.verilator clean

================================================================================
下一步
================================================================================

1. 立即测试：
   cd tb && ./run_verilator.sh

2. 查看详细文档：
   cat tb/VERILATOR_GUIDE.md

3. 性能对比：
   # 先用 Icarus Verilog
   time make SIM=iverilog
   
   # 再用 Verilator
   time make SIM=verilator
   
   比较运行时间！

================================================================================
获取帮助
================================================================================

Makefile 帮助：
  make -f Makefile.verilator help

完整文档：
  - tb/VERILATOR_GUIDE.md         详细使用指南
  - tb/README_TEST.md             测试总体文档
  - TESTING_GUIDE.md              完整测试指南

在线资源：
  - https://verilator.org/guide/latest/
  - https://github.com/verilator/verilator

================================================================================

Verilator 仿真环境已就绪！开始体验高性能仿真吧！ 🚀

创建日期：2025-10-06
================================================================================


# Makefile for Verilator Simulation
# 专门用于 Verilator 的构建文件

# ============================================================================
# 配置
# ============================================================================

# Verilator 可执行文件
VERILATOR = verilator

# 顶层模块
TOP_MODULE = eth_mac_rgmii_axi_tb

# 工作目录
OBJ_DIR = obj_dir
VCD_FILE = eth_mac_rgmii_axi_tb.vcd

# RTL 源文件目录
RTL_DIR = ..
ETH_RTL_DIR = ../verilog-ethernet/rtl
AXI_RTL_DIR = ../verilog-axi/rtl

# C++ testbench
CPP_TB = eth_mac_rgmii_axi_tb.cpp

# Testbench 文件
TB_FILES = eth_mac_rgmii_axi_tb.v

# 核心设计文件
DESIGN_FILES = \
	$(RTL_DIR)/eth_mac_rgmii_axi.v \
	$(RTL_DIR)/eth_frame_filter.v \
	$(RTL_DIR)/eth_mac_axil_regs.v

# verilog-ethernet 依赖文件
ETH_FILES = \
	$(ETH_RTL_DIR)/eth_mac_1g_rgmii.v \
	$(ETH_RTL_DIR)/eth_mac_1g_rgmii_fifo.v \
	$(ETH_RTL_DIR)/eth_mac_1g.v \
	$(ETH_RTL_DIR)/eth_axis_rx.v \
	$(ETH_RTL_DIR)/eth_axis_tx.v \
	$(ETH_RTL_DIR)/ip_complete.v \
	$(ETH_RTL_DIR)/ip.v \
	$(ETH_RTL_DIR)/ip_eth_rx.v \
	$(ETH_RTL_DIR)/ip_eth_tx.v \
	$(ETH_RTL_DIR)/arp.v \
	$(ETH_RTL_DIR)/arp_eth_rx.v \
	$(ETH_RTL_DIR)/arp_eth_tx.v \
	$(ETH_RTL_DIR)/arp_cache.v \
	$(ETH_RTL_DIR)/eth_arb_mux.v \
	$(ETH_RTL_DIR)/axis_gmii_rx.v \
	$(ETH_RTL_DIR)/axis_gmii_tx.v \
	$(ETH_RTL_DIR)/rgmii_phy_if.v \
	$(ETH_RTL_DIR)/ssio_ddr_in.v \
	$(ETH_RTL_DIR)/ssio_ddr_out.v \
	$(ETH_RTL_DIR)/iddr.v \
	$(ETH_RTL_DIR)/oddr.v \
	$(ETH_RTL_DIR)/lfsr.v

# verilog-axi 依赖文件
AXI_FILES = \
	$(AXI_RTL_DIR)/axi_dma.v \
	$(AXI_RTL_DIR)/axi_dma_rd.v \
	$(AXI_RTL_DIR)/axi_dma_wr.v \
	$(AXI_RTL_DIR)/arbiter.v \
	$(AXI_RTL_DIR)/priority_encoder.v

# 所有 Verilog 源文件
VERILOG_SOURCES = $(DESIGN_FILES) $(ETH_FILES) $(AXI_FILES) $(TB_FILES)

# Verilator 标志
VERILATOR_FLAGS = \
	--cc \
	--exe \
	--build \
	--trace \
	--trace-structs \
	--trace-depth 99 \
	--no-timing \
	-Wall \
	-Wno-fatal \
	-Wno-UNUSED \
	-Wno-UNDRIVEN \
	-Wno-WIDTH \
	-Wno-PINMISSING \
	-Wno-PINCONNECTEMPTY \
	-Wno-GENUNNAMED \
	--top-module $(TOP_MODULE) \
	-Mdir $(OBJ_DIR) \
	-CFLAGS "-std=c++11 -O2" \
	-LDFLAGS ""

# ============================================================================
# 目标
# ============================================================================

.PHONY: all build run clean waves help

# 默认目标
all: build run

# 构建
build: $(VERILOG_SOURCES) $(CPP_TB)
	@echo "=== 使用 Verilator 构建 ==="
	@echo "Verilator 版本:"
	@$(VERILATOR) --version
	@echo ""
	@echo "编译文件列表:"
	@echo "  设计文件: $(words $(DESIGN_FILES)) 个"
	@echo "  以太网库: $(words $(ETH_FILES)) 个"
	@echo "  AXI 库: $(words $(AXI_FILES)) 个"
	@echo "  测试文件: $(words $(TB_FILES)) 个"
	@echo ""
	$(VERILATOR) $(VERILATOR_FLAGS) $(VERILOG_SOURCES) $(CPP_TB)
	@echo ""
	@echo "=== 构建完成 ==="
	@echo "可执行文件: $(OBJ_DIR)/V$(TOP_MODULE)"

# 运行仿真
run: build
	@echo ""
	@echo "=== 运行 Verilator 仿真 ==="
	@echo ""
	./$(OBJ_DIR)/V$(TOP_MODULE)
	@echo ""
	@if [ -f $(VCD_FILE) ]; then \
		echo "波形文件已生成: $(VCD_FILE)"; \
		ls -lh $(VCD_FILE); \
		echo ""; \
		echo "使用以下命令查看波形:"; \
		echo "  make waves"; \
		echo "  或"; \
		echo "  gtkwave $(VCD_FILE)"; \
	else \
		echo "警告: 未生成波形文件"; \
	fi

# 查看波形
waves:
	@if [ -f $(VCD_FILE) ]; then \
		echo "使用 GTKWave 打开波形..."; \
		gtkwave $(VCD_FILE) work/eth_mac_rgmii_axi_tb.gtkw & \
	else \
		echo "错误: 波形文件不存在。请先运行 'make run'"; \
	fi

# 清理
clean:
	@echo "清理生成的文件..."
	rm -rf $(OBJ_DIR)
	rm -f $(VCD_FILE)
	rm -f *.log
	@echo "清理完成"

# 帮助
help:
	@echo "Verilator 仿真 Makefile"
	@echo ""
	@echo "目标:"
	@echo "  all (默认)  - 构建并运行仿真"
	@echo "  build       - 仅构建"
	@echo "  run         - 构建并运行"
	@echo "  waves       - 使用 GTKWave 查看波形"
	@echo "  clean       - 清理生成的文件"
	@echo "  help        - 显示此帮助信息"
	@echo ""
	@echo "示例:"
	@echo "  make              # 构建并运行"
	@echo "  make build        # 仅构建"
	@echo "  make run          # 运行仿真"
	@echo "  make waves        # 查看波形"
	@echo "  make clean        # 清理"

# 调试信息
info:
	@echo "配置信息:"
	@echo "  顶层模块: $(TOP_MODULE)"
	@echo "  对象目录: $(OBJ_DIR)"
	@echo "  波形文件: $(VCD_FILE)"
	@echo "  设计文件数: $(words $(DESIGN_FILES))"
	@echo "  Ethernet 文件数: $(words $(ETH_FILES))"
	@echo "  AXI 文件数: $(words $(AXI_FILES))"
	@echo "  总文件数: $(words $(VERILOG_SOURCES))"
	@echo ""
	@echo "Verilator:"
	@which $(VERILATOR) || echo "  未找到 Verilator"
	@$(VERILATOR) --version 2>/dev/null || echo "  无法获取版本"

